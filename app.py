import streamlit as st
import pandas as pd
import io
import json
import hashlib
from datetime import datetime, timedelta
import time
from qcloud_cos import CosConfig
from qcloud_cos import CosS3Client
from qcloud_cos.cos_exception import CosServiceError, CosClientError
from supabase import create_client, Client
import logging
from typing import Optional, Dict, Any, List
import traceback

# È°µÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="Èó®Â∫óÊä•Ë°®Êü•ËØ¢Á≥ªÁªü", 
    page_icon="üìä",
    layout="wide"
)

# Á≥ªÁªüÈÖçÁΩÆ
ADMIN_PASSWORD = st.secrets.get("system", {}).get("admin_password", "admin123")

# CSSÊ†∑Âºè
st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        padding: 1rem 0;
        margin-bottom: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .store-info {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    .admin-panel {
        background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border: 2px solid #fdcb6e;
        margin: 1rem 0;
    }
    .architecture-info {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 2px solid #48cab2;
    }
    .success-box {
        background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: #2d3436;
    }
    .warning-box {
        background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TencentCOSManager:
    """ËÖæËÆØ‰∫ëCOSÂ≠òÂÇ®ÁÆ°ÁêÜÂô®"""
    
    def __init__(self):
        self.client = None
        self.bucket_name = None
        self.region = None
        self.initialize_from_secrets()
    
    def initialize_from_secrets(self):
        """‰ªéStreamlit SecretsÂàùÂßãÂåñ"""
        try:
            if "tencent_cos" not in st.secrets:
                raise Exception("Êú™ÊâæÂà∞ËÖæËÆØ‰∫ëCOSÈÖçÁΩÆ")
            
            config = st.secrets["tencent_cos"]
            secret_id = config.get("secret_id")
            secret_key = config.get("secret_key")
            self.region = config.get("region", "ap-beijing")
            self.bucket_name = config.get("bucket_name")
            
            if not all([secret_id, secret_key, self.bucket_name]):
                raise Exception("ËÖæËÆØ‰∫ëCOSÈÖçÁΩÆ‰∏çÂÆåÊï¥")
            
            # ÈÖçÁΩÆCOSÂÆ¢Êà∑Á´Ø
            cos_config = CosConfig(
                Region=self.region,
                SecretId=secret_id,
                SecretKey=secret_key
            )
            
            self.client = CosS3Client(cos_config)
            logger.info("ËÖæËÆØ‰∫ëCOSÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü")
            
        except Exception as e:
            logger.error(f"ËÖæËÆØ‰∫ëCOSÂàùÂßãÂåñÂ§±Ë¥•: {str(e)}")
            raise
    
    def upload_file(self, file_data: bytes, filename: str) -> Optional[str]:
        """‰∏ä‰º†Êñá‰ª∂Âà∞ËÖæËÆØ‰∫ëCOS"""
        try:
            # ‰∏ä‰º†Êñá‰ª∂
            response = self.client.put_object(
                Bucket=self.bucket_name,
                Body=file_data,
                Key=filename,
                ContentType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            
            # ÁîüÊàêÊñá‰ª∂URL
            file_url = f"https://{self.bucket_name}.cos.{self.region}.myqcloud.com/{filename}"
            
            logger.info(f"Êñá‰ª∂‰∏ä‰º†ÊàêÂäü: {filename}")
            return file_url
            
        except CosServiceError as e:
            logger.error(f"COSÊúçÂä°ÈîôËØØ: {e.get_error_msg()}")
            raise Exception(f"Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•: {e.get_error_msg()}")
        except CosClientError as e:
            logger.error(f"COSÂÆ¢Êà∑Á´ØÈîôËØØ: {str(e)}")
            raise Exception(f"Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•: {str(e)}")
        except Exception as e:
            logger.error(f"‰∏ä‰º†Êñá‰ª∂Êó∂Âá∫Èîô: {str(e)}")
            raise Exception(f"Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•: {str(e)}")
    
    def download_file(self, filename: str) -> Optional[bytes]:
        """‰ªéËÖæËÆØ‰∫ëCOS‰∏ãËΩΩÊñá‰ª∂"""
        try:
            response = self.client.get_object(
                Bucket=self.bucket_name,
                Key=filename
            )
            
            # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            file_data = response['Body'].read()
            logger.info(f"Êñá‰ª∂‰∏ãËΩΩÊàêÂäü: {filename}")
            return file_data
            
        except CosServiceError as e:
            logger.error(f"COSÊúçÂä°ÈîôËØØ: {e.get_error_msg()}")
            return None
        except CosClientError as e:
            logger.error(f"COSÂÆ¢Êà∑Á´ØÈîôËØØ: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"‰∏ãËΩΩÊñá‰ª∂Êó∂Âá∫Èîô: {str(e)}")
            return None
    
    def delete_file(self, filename: str) -> bool:
        """Âà†Èô§ËÖæËÆØ‰∫ëCOSÊñá‰ª∂"""
        try:
            self.client.delete_object(
                Bucket=self.bucket_name,
                Key=filename
            )
            
            logger.info(f"Êñá‰ª∂Âà†Èô§ÊàêÂäü: {filename}")
            return True
            
        except CosServiceError as e:
            logger.error(f"COSÊúçÂä°ÈîôËØØ: {e.get_error_msg()}")
            return False
        except CosClientError as e:
            logger.error(f"COSÂÆ¢Êà∑Á´ØÈîôËØØ: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"Âà†Èô§Êñá‰ª∂Êó∂Âá∫Èîô: {str(e)}")
            return False
    
    def list_files(self) -> List[Dict]:
        """ÂàóÂá∫Â≠òÂÇ®Ê°∂‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂"""
        try:
            response = self.client.list_objects(
                Bucket=self.bucket_name,
                MaxKeys=1000
            )
            
            files = []
            if 'Contents' in response:
                for obj in response['Contents']:
                    files.append({
                        'filename': obj['Key'],
                        'size': obj['Size'],
                        'last_modified': obj['LastModified']
                    })
            
            return files
            
        except Exception as e:
            logger.error(f"ÂàóÂá∫Êñá‰ª∂Êó∂Âá∫Èîô: {str(e)}")
            return []
    
    def get_storage_usage(self) -> Dict:
        """Ëé∑ÂèñÂ≠òÂÇ®‰ΩøÁî®ÊÉÖÂÜµ"""
        try:
            files = self.list_files()
            total_size = sum(f['size'] for f in files)
            
            return {
                'file_count': len(files),
                'total_size_bytes': total_size,
                'total_size_mb': total_size / (1024 * 1024),
                'files': files
            }
            
        except Exception as e:
            logger.error(f"Ëé∑ÂèñÂ≠òÂÇ®‰ΩøÁî®ÊÉÖÂÜµÂ§±Ë¥•: {str(e)}")
            return {'file_count': 0, 'total_size_mb': 0, 'files': []}

class SupabaseManager:
    """SupabaseÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜÂô®"""
    
    def __init__(self):
        self.supabase: Optional[Client] = None
        self.initialize_from_secrets()
    
    def initialize_from_secrets(self):
        """‰ªéStreamlit SecretsÂàùÂßãÂåñ"""
        try:
            if "supabase" not in st.secrets:
                raise Exception("Êú™ÊâæÂà∞SupabaseÈÖçÁΩÆ")
            
            config = st.secrets["supabase"]
            url = config.get("url")
            key = config.get("anon_key")
            
            if not url or not key:
                raise Exception("SupabaseÈÖçÁΩÆ‰∏çÂÆåÊï¥")
            
            self.supabase = create_client(url, key)
            logger.info("SupabaseÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü")
            
        except Exception as e:
            logger.error(f"SupabaseÂàùÂßãÂåñÂ§±Ë¥•: {str(e)}")
            raise
    
    def save_permissions(self, permissions_data: List[Dict]) -> bool:
        """‰øùÂ≠òÊùÉÈôêÊï∞ÊçÆ"""
        try:
            # Ê∏ÖÁ©∫Áé∞ÊúâÊï∞ÊçÆ
            self.supabase.table("permissions").delete().neq("id", 0).execute()
            
            # ÊèíÂÖ•Êñ∞Êï∞ÊçÆ
            if permissions_data:
                result = self.supabase.table("permissions").insert(permissions_data).execute()
                return len(result.data) > 0
            return True
            
        except Exception as e:
            logger.error(f"‰øùÂ≠òÊùÉÈôêÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return False
    
    def load_permissions(self) -> List[Dict]:
        """Âä†ËΩΩÊùÉÈôêÊï∞ÊçÆ"""
        try:
            result = self.supabase.table("permissions").select("*").execute()
            return result.data
            
        except Exception as e:
            logger.error(f"Âä†ËΩΩÊùÉÈôêÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return []
    
    def save_report_metadata(self, report_data: Dict) -> bool:
        """‰øùÂ≠òÊä•Ë°®ÂÖÉÊï∞ÊçÆ"""
        try:
            # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
            existing = self.supabase.table("reports").select("*").eq("store_name", report_data["store_name"]).execute()
            
            if existing.data:
                # Êõ¥Êñ∞Áé∞ÊúâËÆ∞ÂΩï
                result = self.supabase.table("reports").update(report_data).eq("store_name", report_data["store_name"]).execute()
            else:
                # ÊèíÂÖ•Êñ∞ËÆ∞ÂΩï
                result = self.supabase.table("reports").insert(report_data).execute()
            
            return len(result.data) > 0
            
        except Exception as e:
            logger.error(f"‰øùÂ≠òÊä•Ë°®ÂÖÉÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return False
    
    def load_report_metadata(self, store_name: str = None) -> List[Dict]:
        """Âä†ËΩΩÊä•Ë°®ÂÖÉÊï∞ÊçÆ"""
        try:
            query = self.supabase.table("reports").select("*")
            
            if store_name:
                query = query.eq("store_name", store_name)
            
            result = query.execute()
            return result.data
            
        except Exception as e:
            logger.error(f"Âä†ËΩΩÊä•Ë°®ÂÖÉÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return []
    
    def delete_report_metadata(self, report_id: int) -> bool:
        """Âà†Èô§Êä•Ë°®ÂÖÉÊï∞ÊçÆ"""
        try:
            result = self.supabase.table("reports").delete().eq("id", report_id).execute()
            return len(result.data) > 0
            
        except Exception as e:
            logger.error(f"Âà†Èô§Êä•Ë°®ÂÖÉÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return False

class TencentSupabaseSystem:
    """ËÖæËÆØ‰∫ë+SupabaseÊ∑∑ÂêàÂ≠òÂÇ®Á≥ªÁªü"""
    
    def __init__(self):
        self.cos_manager = TencentCOSManager()
        self.database = SupabaseManager()
        self.initialized = True
    
    def show_architecture_info(self):
        """ÊòæÁ§∫Êû∂ÊûÑ‰ø°ÊÅØ"""
        st.markdown('''
        <div class="architecture-info">
        <h4>üèóÔ∏è ËÖæËÆØ‰∫ë + Supabase Ê∑∑ÂêàÊû∂ÊûÑ</h4>
        <p><strong>üì¶ ËÖæËÆØ‰∫ëCOS</strong>: Â≠òÂÇ®ExcelÊñá‰ª∂ (50GBÊ∞∏‰πÖÂÖçË¥π)</p>
        <p><strong>üóÑÔ∏è Supabase</strong>: Â≠òÂÇ®ÊùÉÈôê„ÄÅÂÖÉÊï∞ÊçÆ„ÄÅÂàÜÊûêÁªìÊûú (500MBÂÖçË¥π)</p>
        <p><strong>üí´ ‰ºòÂäø</strong>: ‰∏≠ÂõΩÁî®Êà∑‰ºòÂåñ + Â§ßÊñá‰ª∂ÊîØÊåÅ + Âø´ÈÄüÊü•ËØ¢ + ÂæÆ‰ø°ÊîØ‰ªò</p>
        </div>
        ''', unsafe_allow_html=True)
    
    def upload_and_process_permissions(self, uploaded_file) -> bool:
        """‰∏ä‰º†Âπ∂Â§ÑÁêÜÊùÉÈôêÊñá‰ª∂"""
        try:
            # ËØªÂèñExcelÊñá‰ª∂
            df = pd.read_excel(uploaded_file)
            
            if len(df.columns) < 2:
                st.error("‚ùå ÊùÉÈôêÊñá‰ª∂Ê†ºÂºèÈîôËØØÔºöÈúÄË¶ÅËá≥Â∞ë‰∏§ÂàóÔºàÈó®Â∫óÂêçÁß∞„ÄÅ‰∫∫ÂëòÁºñÂè∑Ôºâ")
                return False
            
            # ËΩ¨Êç¢‰∏∫Êï∞ÊçÆÂ∫ìÊ†ºÂºè
            permissions_data = []
            for _, row in df.iterrows():
                store_name = str(row.iloc[0]).strip()
                user_id = str(row.iloc[1]).strip()
                
                if store_name and user_id and store_name != 'nan' and user_id != 'nan':
                    permissions_data.append({
                        "store_name": store_name,
                        "user_id": user_id,
                        "created_at": datetime.now().isoformat(),
                        "updated_at": datetime.now().isoformat()
                    })
            
            # ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì
            success = self.database.save_permissions(permissions_data)
            
            if success:
                st.success(f"‚úÖ ÊùÉÈôêÊï∞ÊçÆ‰øùÂ≠òÊàêÂäüÔºö{len(permissions_data)} Êù°ËÆ∞ÂΩï")
                return True
            else:
                st.error("‚ùå ÊùÉÈôêÊï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Â§ÑÁêÜÊùÉÈôêÊñá‰ª∂Â§±Ë¥•Ôºö{str(e)}")
            logger.error(f"Â§ÑÁêÜÊùÉÈôêÊñá‰ª∂Â§±Ë¥•: {str(e)}")
            return False
    
    def upload_and_process_reports(self, uploaded_file) -> bool:
        """‰∏ä‰º†Âπ∂Â§ÑÁêÜÊä•Ë°®Êñá‰ª∂"""
        try:
            file_size_mb = len(uploaded_file.getvalue()) / 1024 / 1024
            st.info(f"üìÑ Êñá‰ª∂Â§ßÂ∞è: {file_size_mb:.2f} MB")
            
            # ÁîüÊàêÂîØ‰∏ÄÊñá‰ª∂Âêç
            timestamp = int(time.time())
            file_hash = hashlib.md5(uploaded_file.getvalue()).hexdigest()[:8]
            filename = f"reports_{timestamp}_{file_hash}.xlsx"
            
            # ÂÖàÊ∏ÖÁêÜÊóßÊï∞ÊçÆ
            with st.spinner("Ê≠£Âú®Ê∏ÖÁêÜÊóßÊï∞ÊçÆ..."):
                self._cleanup_old_reports()
            
            # ‰∏ä‰º†ÂéüÂßãÊñá‰ª∂Âà∞ËÖæËÆØ‰∫ëCOS
            with st.spinner("Ê≠£Âú®‰∏ä‰º†Êñá‰ª∂Âà∞ËÖæËÆØ‰∫ëCOS..."):
                file_url = self.cos_manager.upload_file(uploaded_file.getvalue(), filename)
                
                if not file_url:
                    st.error("‚ùå Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•")
                    return False
            
            st.success(f"‚úÖ Êñá‰ª∂‰∏ä‰º†ÊàêÂäü: {filename}")
            
            # Ëß£ÊûêExcelÊñá‰ª∂Âπ∂ÊèêÂèñÂÖÉÊï∞ÊçÆ
            with st.spinner("Ê≠£Âú®ÂàÜÊûêÊñá‰ª∂ÂÜÖÂÆπ..."):
                excel_file = pd.ExcelFile(uploaded_file)
                
                reports_processed = 0
                
                for sheet_name in excel_file.sheet_names:
                    try:
                        df = pd.read_excel(uploaded_file, sheet_name=sheet_name)
                        
                        if df.empty:
                            continue
                        
                        # ÂàÜÊûêÂ∫îÊî∂-Êú™Êî∂È¢ù
                        analysis_result = self.analyze_receivable_data(df)
                        
                        # ÁîüÊàêÊï∞ÊçÆÊëòË¶Å
                        summary = {
                            "total_rows": len(df),
                            "total_columns": len(df.columns),
                            "columns": df.columns.tolist()[:10],  # Âè™‰øùÂ≠òÂâç10ÂàóÂêç
                            "has_data": not df.empty
                        }
                        
                        # ‰øùÂ≠òÊä•Ë°®ÂÖÉÊï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì
                        report_metadata = {
                            "store_name": sheet_name,
                            "filename": filename,
                            "file_url": file_url,
                            "file_size_mb": file_size_mb,
                            "upload_time": datetime.now().isoformat(),
                            "summary": json.dumps(summary),
                            "analysis_result": json.dumps(analysis_result),
                            "row_count": len(df),
                            "column_count": len(df.columns)
                        }
                        
                        if self.database.save_report_metadata(report_metadata):
                            reports_processed += 1
                            st.success(f"‚úÖ {sheet_name}: {len(df)} Ë°åÊï∞ÊçÆÂ∑≤Â§ÑÁêÜ")
                        else:
                            st.warning(f"‚ö†Ô∏è {sheet_name}: ÂÖÉÊï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•")
                            
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Ë∑≥ËøáÂ∑•‰ΩúË°® '{sheet_name}': {str(e)}")
                        continue
                
                if reports_processed > 0:
                    st.success(f"üéâ Êä•Ë°®Â§ÑÁêÜÂÆåÊàêÔºö{reports_processed} ‰∏™Â∑•‰ΩúË°®")
                    
                    # ÊòæÁ§∫Â≠òÂÇ®ÁªüËÆ°
                    self._show_storage_stats()
                    return True
                else:
                    st.error("‚ùå Ê≤°ÊúâÊàêÂäüÂ§ÑÁêÜ‰ªª‰ΩïÂ∑•‰ΩúË°®")
                    return False
                
        except Exception as e:
            st.error(f"‚ùå Â§ÑÁêÜÊä•Ë°®Êñá‰ª∂Â§±Ë¥•Ôºö{str(e)}")
            logger.error(f"Â§ÑÁêÜÊä•Ë°®Êñá‰ª∂Â§±Ë¥•: {str(e)}")
            return False
    
    def _cleanup_old_reports(self):
        """Ê∏ÖÁêÜÊóßÁöÑÊä•Ë°®Êï∞ÊçÆ"""
        try:
            # Ëé∑ÂèñÊâÄÊúâÊä•Ë°®ÂÖÉÊï∞ÊçÆ
            all_reports = self.database.load_report_metadata()
            
            # Âà†Èô§ËÖæËÆØ‰∫ëCOS‰∏≠ÁöÑÊóßÊñá‰ª∂
            deleted_count = 0
            for report in all_reports:
                try:
                    filename = report.get("filename")
                    if filename and self.cos_manager.delete_file(filename):
                        deleted_count += 1
                except:
                    continue
            
            # Ê∏ÖÁ©∫Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊä•Ë°®ÂÖÉÊï∞ÊçÆ
            self.database.supabase.table("reports").delete().neq("id", 0).execute()
            
            if deleted_count > 0:
                st.info(f"üßπ Â∑≤Ê∏ÖÁêÜ {deleted_count} ‰∏™ÊóßÊñá‰ª∂")
                
        except Exception as e:
            st.warning(f"Ê∏ÖÁêÜÊóßÊï∞ÊçÆÊó∂Âá∫Èîô: {str(e)}")
    
    def _show_storage_stats(self):
        """ÊòæÁ§∫Â≠òÂÇ®ÁªüËÆ°‰ø°ÊÅØ"""
        try:
            # Ëé∑ÂèñCOS‰ΩøÁî®ÊÉÖÂÜµ
            cos_usage = self.cos_manager.get_storage_usage()
            
            # Ëé∑ÂèñÊï∞ÊçÆÂ∫ìËÆ∞ÂΩïÊï∞
            reports_count = len(self.database.load_report_metadata())
            permissions_count = len(self.database.load_permissions())
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üì¶ COSÊñá‰ª∂Êï∞", cos_usage['file_count'])
                st.metric("üíæ COS‰ΩøÁî®", f"{cos_usage['total_size_mb']:.2f} MB")
                
                # ‰ΩøÁî®ÁéáËÆ°ÁÆó
                usage_percent = (cos_usage['total_size_mb'] / (50 * 1024)) * 100
                st.progress(min(usage_percent / 100, 1.0))
                st.caption(f"‰ΩøÁî®Áéá: {usage_percent:.1f}% / 50GBÂÖçË¥π")
            
            with col2:
                st.metric("üóÑÔ∏è Êä•Ë°®ËÆ∞ÂΩï", reports_count)
                st.metric("üë• ÊùÉÈôêËÆ∞ÂΩï", permissions_count)
            
            with col3:
                st.metric("üìä ÊÄªÈó®Â∫óÊï∞", reports_count)
                st.metric("üöÄ Á≥ªÁªüÁä∂ÊÄÅ", "Ê≠£Â∏∏ËøêË°å")
                
        except Exception as e:
            st.warning(f"Ëé∑ÂèñÂ≠òÂÇ®ÁªüËÆ°Â§±Ë¥•: {str(e)}")
    
    def analyze_receivable_data(self, df: pd.DataFrame) -> Dict[str, Any]:
        """ÂàÜÊûêÂ∫îÊî∂Êú™Êî∂È¢ùÊï∞ÊçÆ"""
        result = {}
        
        if len(df.columns) == 0 or len(df) == 0:
            return result
        
        # Êü•ÊâæÁ¨¨69Ë°å
        target_row_index = 68  # Á¨¨69Ë°å
        
        if len(df) > target_row_index:
            row = df.iloc[target_row_index]
            first_col_value = str(row.iloc[0]) if pd.notna(row.iloc[0]) else ""
            
            # Ê£ÄÊü•ÂÖ≥ÈîÆËØç
            keywords = ['Â∫îÊî∂-Êú™Êî∂È¢ù', 'Â∫îÊî∂Êú™Êî∂È¢ù', 'Â∫îÊî∂-Êú™Êî∂', 'Â∫îÊî∂Êú™Êî∂']
            
            for keyword in keywords:
                if keyword in first_col_value:
                    # Êü•ÊâæÊï∞ÂÄº
                    for col_idx in range(len(row)-1, 0, -1):
                        val = row.iloc[col_idx]
                        if pd.notna(val) and str(val).strip() not in ['', 'None', 'nan']:
                            cleaned = str(val).replace(',', '').replace('¬•', '').replace('Ôø•', '').strip()
                            
                            if cleaned.startswith('(') and cleaned.endswith(')'):
                                cleaned = '-' + cleaned[1:-1]
                            
                            try:
                                amount = float(cleaned)
                                if amount != 0:
                                    result['Â∫îÊî∂-Êú™Êî∂È¢ù'] = {
                                        'amount': amount,
                                        'column_name': str(df.columns[col_idx]),
                                        'row_name': first_col_value,
                                        'row_index': target_row_index,
                                        'actual_row_number': target_row_index + 1
                                    }
                                    return result
                            except ValueError:
                                continue
                    break
        
        return result
    
    def load_store_data(self, store_name: str) -> Optional[pd.DataFrame]:
        """Âä†ËΩΩÊåáÂÆöÈó®Â∫óÁöÑÊï∞ÊçÆ"""
        try:
            # ‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÊä•Ë°®ÂÖÉÊï∞ÊçÆ
            reports = self.database.load_report_metadata(store_name)
            
            if not reports:
                return None
            
            # Ëé∑ÂèñÊúÄÊñ∞ÁöÑÊä•Ë°®
            latest_report = max(reports, key=lambda x: x.get('upload_time', ''))
            filename = latest_report.get('filename')
            
            if not filename:
                return None
            
            # ‰ªéËÖæËÆØ‰∫ëCOS‰∏ãËΩΩÊñá‰ª∂
            with st.spinner(f"Ê≠£Âú®‰ªéËÖæËÆØ‰∫ëÂä†ËΩΩ {store_name} ÁöÑÊï∞ÊçÆ..."):
                file_data = self.cos_manager.download_file(filename)
                
                if file_data:
                    # Ëß£ÊûêExcelÊñá‰ª∂
                    excel_file = pd.ExcelFile(io.BytesIO(file_data))
                    
                    # Êü•ÊâæÂåπÈÖçÁöÑÂ∑•‰ΩúË°®
                    matching_sheets = [sheet for sheet in excel_file.sheet_names 
                                     if store_name in sheet or sheet in store_name]
                    
                    if matching_sheets:
                        df = pd.read_excel(io.BytesIO(file_data), sheet_name=matching_sheets[0])
                        return df
                    
            return None
            
        except Exception as e:
            st.error(f"‚ùå Âä†ËΩΩ {store_name} Êï∞ÊçÆÂ§±Ë¥•Ôºö{str(e)}")
            logger.error(f"Âä†ËΩΩÈó®Â∫óÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return None
    
    def verify_user_permission(self, store_name: str, user_id: str) -> bool:
        """È™åËØÅÁî®Êà∑ÊùÉÈôê"""
        try:
            permissions = self.database.load_permissions()
            
            for perm in permissions:
                stored_store = perm.get('store_name', '').strip()
                stored_id = perm.get('user_id', '').strip()
                
                if (store_name in stored_store or stored_store in store_name) and stored_id == str(user_id):
                    return True
            
            return False
            
        except Exception as e:
            st.error(f"‚ùå ÊùÉÈôêÈ™åËØÅÂ§±Ë¥•Ôºö{str(e)}")
            logger.error(f"ÊùÉÈôêÈ™åËØÅÂ§±Ë¥•: {str(e)}")
            return False
    
    def get_available_stores(self) -> List[str]:
        """Ëé∑ÂèñÂèØÁî®ÁöÑÈó®Â∫óÂàóË°®"""
        try:
            permissions = self.database.load_permissions()
            stores = list(set(perm.get('store_name', '') for perm in permissions))
            return sorted([store for store in stores if store.strip()])
            
        except Exception as e:
            st.error(f"‚ùå Ëé∑ÂèñÈó®Â∫óÂàóË°®Â§±Ë¥•Ôºö{str(e)}")
            logger.error(f"Ëé∑ÂèñÈó®Â∫óÂàóË°®Â§±Ë¥•: {str(e)}")
            return []
    
    def cleanup_storage(self, cleanup_type: str = "all"):
        """Ê∏ÖÁêÜÂ≠òÂÇ®Á©∫Èó¥"""
        try:
            if cleanup_type == "all":
                # Ê∏ÖÁêÜÊâÄÊúâÊï∞ÊçÆ
                cos_files = self.cos_manager.list_files()
                deleted_cos = 0
                
                for file_info in cos_files:
                    if self.cos_manager.delete_file(file_info['filename']):
                        deleted_cos += 1
                
                # Ê∏ÖÁêÜÊï∞ÊçÆÂ∫ì
                self.database.supabase.table("reports").delete().neq("id", 0).execute()
                self.database.supabase.table("permissions").delete().neq("id", 0).execute()
                
                st.success(f"üßπ Ê∏ÖÁêÜÂÆåÊàêÔºöÂà†Èô§‰∫Ü {deleted_cos} ‰∏™COSÊñá‰ª∂ÂíåÊâÄÊúâÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï")
                
        except Exception as e:
            st.error(f"‚ùå Ê∏ÖÁêÜÂ§±Ë¥•Ôºö{str(e)}")
            logger.error(f"Â≠òÂÇ®Ê∏ÖÁêÜÂ§±Ë¥•: {str(e)}")

# ÂàùÂßãÂåñ‰ºöËØùÁä∂ÊÄÅ
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'store_name' not in st.session_state:
    st.session_state.store_name = ""
if 'user_id' not in st.session_state:
    st.session_state.user_id = ""
if 'is_admin' not in st.session_state:
    st.session_state.is_admin = False
if 'storage_system' not in st.session_state:
    st.session_state.storage_system = None

# ‰∏ªÊ†áÈ¢ò
st.markdown('<h1 class="main-header">üìä Èó®Â∫óÊä•Ë°®Êü•ËØ¢Á≥ªÁªü </h1>', unsafe_allow_html=True)

# ÂàùÂßãÂåñÂ≠òÂÇ®Á≥ªÁªü
if not st.session_state.storage_system:
    try:
        st.session_state.storage_system = TencentSupabaseSystem()
        st.success("‚úÖ ËÖæËÆØ‰∫ë+SupabaseÂ≠òÂÇ®Á≥ªÁªüÂàùÂßãÂåñÊàêÂäü")
    except Exception as e:
        st.error(f"‚ùå Â≠òÂÇ®Á≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•: {str(e)}")
        st.stop()

storage_system = st.session_state.storage_system

# ÊòæÁ§∫Êû∂ÊûÑ‰ø°ÊÅØ
storage_system.show_architecture_info()

# ‰æßËæπÊ†è
with st.sidebar:
    st.title("‚öôÔ∏è Á≥ªÁªüÂäüËÉΩ")
    
    user_type = st.radio("ÈÄâÊã©Áî®Êà∑Á±ªÂûã", ["ÊôÆÈÄöÁî®Êà∑", "ÁÆ°ÁêÜÂëò"])
    
    if user_type == "ÁÆ°ÁêÜÂëò":
        st.subheader("üîê ÁÆ°ÁêÜÂëòÁôªÂΩï")
        admin_password = st.text_input("ÁÆ°ÁêÜÂëòÂØÜÁ†Å", type="password")
        
        if st.button("È™åËØÅÁÆ°ÁêÜÂëòË∫´‰ªΩ"):
            if admin_password == ADMIN_PASSWORD:
                st.session_state.is_admin = True
                st.success("‚úÖ ÁÆ°ÁêÜÂëòÈ™åËØÅÊàêÂäüÔºÅ")
                st.rerun()
            else:
                st.error("‚ùå ÂØÜÁ†ÅÈîôËØØÔºÅ")
    
    else:
        if st.session_state.logged_in:
            st.subheader("üë§ ÂΩìÂâçÁôªÂΩï")
            st.info(f"Èó®Â∫óÔºö{st.session_state.store_name}")
            st.info(f"Êü•ËØ¢ÁºñÁ†ÅÔºö{st.session_state.user_id}")
            
            if st.button("üö™ ÈÄÄÂá∫ÁôªÂΩï"):
                st.session_state.logged_in = False
                st.session_state.store_name = ""
                st.session_state.user_id = ""
                st.success("üëã Â∑≤ÈÄÄÂá∫ÁôªÂΩï")
                st.rerun()

# ‰∏ªÁïåÈù¢
if user_type == "ÁÆ°ÁêÜÂëò" and st.session_state.is_admin:
    st.markdown('''
    <div class="admin-panel">
    <h3>üë®‚Äçüíº ÁÆ°ÁêÜÂëòÊéßÂà∂Èù¢Êùø </h3>
    <p>‚ú® </p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Â≠òÂÇ®ÁÆ°ÁêÜÂå∫Âüü
    st.subheader("üìä Â≠òÂÇ®ÁÆ°ÁêÜ")
    storage_system._show_storage_stats()
    
    st.divider()
    
    # Êñá‰ª∂‰∏ä‰º†Âå∫Âüü
    st.subheader("üìÅ Êñá‰ª∂ÁÆ°ÁêÜ")
    
    tab1, tab2, tab3 = st.tabs(["üìã ÊùÉÈôêË°®", "üìä Êä•Ë°®Êï∞ÊçÆ", "üßπ Â≠òÂÇ®Ê∏ÖÁêÜ"])
    
    with tab1:
        st.markdown("#### ‰∏ä‰º†Èó®Â∫óÊùÉÈôêË°®")
        st.info("üí° ExcelÊñá‰ª∂Ê†ºÂºèÔºöÁ¨¨‰∏ÄÂàó‰∏∫Èó®Â∫óÂêçÁß∞ÔºåÁ¨¨‰∫åÂàó‰∏∫‰∫∫ÂëòÁºñÂè∑")
        
        permissions_file = st.file_uploader("ÈÄâÊã©ÊùÉÈôêExcelÊñá‰ª∂", type=['xlsx', 'xls'], key="permissions")
        
        if permissions_file and st.button("üì§ ‰∏ä‰º†ÊùÉÈôêË°®", key="upload_permissions"):
            if storage_system.upload_and_process_permissions(permissions_file):
                st.balloons()
    
    with tab2:
        st.markdown("#### ‰∏ä‰º†Ë¥¢Âä°Êä•Ë°®")
        
        st.markdown('''
        <div class="success-box">
        <strong>üöÄ ËÖæËÆØ‰∫ëCOS‰ºòÂäø</strong><br>
        ‚Ä¢ 50GBÊ∞∏‰πÖÂÖçË¥πÂ≠òÂÇ®<br>
        ‚Ä¢ ÊîØÊåÅ‰ªªÊÑèÂ§ßÂ∞èExcelÊñá‰ª∂<br>
        ‚Ä¢ ‰∏≠ÂõΩÂú∞Âå∫ËÆøÈóÆÈÄüÂ∫¶Âø´<br>
        ‚Ä¢ ÂæÆ‰ø°ÊîØ‰ªò‰æøÊç∑ÁÆ°ÁêÜ
        </div>
        ''', unsafe_allow_html=True)
        
        reports_file = st.file_uploader("ÈÄâÊã©Êä•Ë°®ExcelÊñá‰ª∂", type=['xlsx', 'xls'], key="reports")
        
        if reports_file:
            file_size = len(reports_file.getvalue()) / 1024 / 1024
            st.metric("Êñá‰ª∂Â§ßÂ∞è", f"{file_size:.2f} MB")
            
            if file_size > 100:
                st.markdown('''
                <div class="warning-box">
                <strong>‚ö†Ô∏è Â§ßÊñá‰ª∂ÊèêÈÜí</strong><br>
                Êñá‰ª∂ËæÉÂ§ßÔºå‰∏ä‰º†ÂèØËÉΩÈúÄË¶ÅËæÉÈïøÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ„ÄÇ<br>
                ËÖæËÆØ‰∫ëCOSÊîØÊåÅÂ§ßÊñá‰ª∂‰∏ä‰º†ÔºåÊó†ÈúÄÊãÖÂøÉÂ§ßÂ∞èÈôêÂà∂„ÄÇ
                </div>
                ''', unsafe_allow_html=True)
        
        if reports_file and st.button("üì§ ‰∏ä‰º†Êä•Ë°®Êï∞ÊçÆ", key="upload_reports"):
            if storage_system.upload_and_process_reports(reports_file):
                st.balloons()
    
    with tab3:
        st.markdown("#### Â≠òÂÇ®Á©∫Èó¥Ê∏ÖÁêÜ")
        
        st.warning("‚ö†Ô∏è Ê∏ÖÁêÜÊìç‰ΩúÂ∞ÜÂà†Èô§ÊâÄÊúâÂ≠òÂÇ®ÁöÑÊï∞ÊçÆÔºåËØ∑Ë∞®ÊÖéÊìç‰ΩúÔºÅ")
        
        if st.checkbox("ÊàëÁ°ÆËÆ§Ë¶ÅÊ∏ÖÁêÜÊâÄÊúâÊï∞ÊçÆ"):
            if st.button("üóëÔ∏è Ê∏ÖÁêÜÊâÄÊúâÂ≠òÂÇ®Êï∞ÊçÆ", type="primary"):
                storage_system.cleanup_storage("all")
                st.rerun()

elif user_type == "ÁÆ°ÁêÜÂëò" and not st.session_state.is_admin:
    st.info("üëà ËØ∑Âú®Â∑¶‰æßËæπÊ†èËæìÂÖ•ÁÆ°ÁêÜÂëòÂØÜÁ†Å")

else:
    if not st.session_state.logged_in:
        st.subheader("üîê Áî®Êà∑ÁôªÂΩï")
        
        try:
            stores = storage_system.get_available_stores()
            
            if not stores:
                st.warning("‚ö†Ô∏è Á≥ªÁªüÁª¥Êä§‰∏≠ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò‰∏ä‰º†ÊùÉÈôêË°®")
            else:
                with st.form("login_form"):
                    selected_store = st.selectbox("ÈÄâÊã©Èó®Â∫ó", stores)
                    user_id = st.text_input("‰∫∫ÂëòÁºñÂè∑")
                    submit = st.form_submit_button("üöÄ ÁôªÂΩï")
                    
                    if submit and selected_store and user_id:
                        if storage_system.verify_user_permission(selected_store, user_id):
                            st.session_state.logged_in = True
                            st.session_state.store_name = selected_store
                            st.session_state.user_id = user_id
                            st.success("‚úÖ ÁôªÂΩïÊàêÂäüÔºÅ")
                            st.balloons()
                            st.rerun()
                        else:
                            st.error("‚ùå Èó®Â∫óÊàñÁºñÂè∑ÈîôËØØÔºÅ")
                            
        except Exception as e:
            st.error(f"‚ùå Á≥ªÁªüËøûÊé•Â§±Ë¥•Ôºö{str(e)}")
    
    else:
        # Â∑≤ÁôªÂΩïÁî®Êà∑ÁïåÈù¢
        st.markdown(f'<div class="store-info"><h3>üè™ {st.session_state.store_name}</h3><p>Êìç‰ΩúÂëòÔºö{st.session_state.user_id}</p></div>', unsafe_allow_html=True)
        
        try:
            df = storage_system.load_store_data(st.session_state.store_name)
            
            if df is not None:
                # Â∫îÊî∂-Êú™Êî∂È¢ùÂàÜÊûê
                st.subheader("üí∞ Â∫îÊî∂-Êú™Êî∂È¢ù")
                
                analysis_results = storage_system.analyze_receivable_data(df)
                
                if 'Â∫îÊî∂-Êú™Êî∂È¢ù' in analysis_results:
                    data = analysis_results['Â∫îÊî∂-Êú™Êî∂È¢ù']
                    amount = data['amount']
                    
                    if amount > 0:
                        st.error(f"üí≥ Â∫î‰ªòÊ¨æÔºö¬•{amount:,.2f}")
                    elif amount < 0:
                        st.success(f"üíö Â∫îÈÄÄÊ¨æÔºö¬•{abs(amount):,.2f}")
                    else:
                        st.info("‚öñÔ∏è Êî∂ÊîØÂπ≥Ë°°Ôºö¬•0.00")
                    
                    # ÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
                    with st.expander("üìä ËØ¶ÁªÜ‰ø°ÊÅØ"):
                        st.write(f"**ÊâÄÂú®Ë°å**: Á¨¨{data['actual_row_number']}Ë°å")
                        st.write(f"**ÊâÄÂú®Âàó**: {data['column_name']}")
                        st.write(f"**Ë°åÊ†áÈ¢ò**: {data['row_name']}")
                else:
                    st.warning("‚ö†Ô∏è Êú™ÊâæÂà∞Â∫îÊî∂-Êú™Êî∂È¢ùÊï∞ÊçÆ")
                
                # Êä•Ë°®Â±ïÁ§∫
                st.subheader("üìã Êä•Ë°®Êï∞ÊçÆ")
                st.dataframe(df, use_container_width=True, height=400)
                
                # ‰∏ãËΩΩÂäüËÉΩ
                if st.button("üì• ‰∏ãËΩΩÂÆåÊï¥Êä•Ë°®"):
                    try:
                        buffer = io.BytesIO()
                        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                            df.to_excel(writer, index=False, sheet_name=st.session_state.store_name)
                        
                        st.download_button(
                            "ÁÇπÂáª‰∏ãËΩΩ",
                            buffer.getvalue(),
                            f"{st.session_state.store_name}_Êä•Ë°®_{datetime.now().strftime('%Y%m%d')}.xlsx",
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    except Exception as e:
                        st.error(f"‰∏ãËΩΩÂ§±Ë¥•Ôºö{str(e)}")
            
            else:
                st.error(f"‚ùå Êú™ÊâæÂà∞Èó®Â∫ó '{st.session_state.store_name}' ÁöÑÊä•Ë°®")
                st.info("ËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò‰∏ä‰º†ÊúÄÊñ∞ÁöÑÊä•Ë°®Êï∞ÊçÆ")
                
        except Exception as e:
            st.error(f"‚ùå Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•Ôºö{str(e)}")

# È°µÈù¢Â∫ïÈÉ®
st.divider()

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.caption(f"üïí {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
with col2:
    st.caption("üè¢ Â≠òÂÇ®")
with col3:
    st.caption("üóÑÔ∏è ")
with col4:
    st.caption("üîß v5.0 ")
